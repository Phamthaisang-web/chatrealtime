import * as yup from "yup";

const objectIdRegex = /^[0-9a-fA-F]{24}$/;

// üîπ Schema g·ª≠i OTP (ƒëƒÉng k√Ω - l∆∞u tempUser)
const requestOtpSchema = yup
  .object({
    body: yup.object({
      firstName: yup
        .string()
        .trim()
        .min(2, "T√™n qu√° ng·∫Øn")
        .max(255, "T√™n qu√° d√†i")
        .required("T√™n l√† b·∫Øt bu·ªôc"),
      lastName: yup
        .string()
        .trim()
        .min(2, "H·ªç qu√° ng·∫Øn")
        .max(255, "H·ªç qu√° d√†i")
        .required("H·ªç l√† b·∫Øt bu·ªôc"),
      email: yup
        .string()
        .email("Email kh√¥ng h·ª£p l·ªá")
        .required("Email l√† b·∫Øt bu·ªôc"),
      password: yup
        .string()
        .min(6, "M·∫≠t kh·∫©u t·ªëi thi·ªÉu 6 k√Ω t·ª±")
        .max(255, "M·∫≠t kh·∫©u t·ªëi ƒëa 255 k√Ω t·ª±")
        .required("M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc"),
      phone: yup.string().max(20).optional(),
      isActive: yup.boolean().optional(),
      dateOfBirth: yup.date().optional(),
    }),
  })
  .required();

// üîπ Schema x√°c minh OTP
const verifyOtpSchema = yup
  .object({
    body: yup.object({
      email: yup.string().email().required("Email l√† b·∫Øt bu·ªôc"),
      otp: yup
        .string()
        .matches(/^\d{6}$/, "OTP ph·∫£i g·ªìm 6 ch·ªØ s·ªë")
        .required("M√£ OTP l√† b·∫Øt bu·ªôc"),
    }),
  })
  .required();

// üîπ Schema c·∫≠p nh·∫≠t user (PUT /users/:id)
const updateUserSchema = yup
  .object({
    params: yup.object({
      id: yup
        .string()
        .matches(objectIdRegex, { message: "ID kh√¥ng h·ª£p l·ªá" })
        .required("ID l√† b·∫Øt bu·ªôc"),
    }),
    body: yup.object({
      firstName: yup.string().min(2).max(255).optional(),
      lastName: yup.string().min(2).max(255).optional(),
      email: yup.string().email().optional(),
      password: yup.string().min(6).max(255).optional(),
      phone: yup.string().max(20).optional(),
      isActive: yup.boolean().optional(),
      dateOfBirth: yup.date().optional(),
    }),
  })
  .required();

// üîπ Schema l·∫•y user theo ID
const getUserByIdSchema = yup
  .object({
    params: yup.object({
      id: yup
        .string()
        .matches(objectIdRegex, { message: "ID kh√¥ng h·ª£p l·ªá" })
        .required("ID l√† b·∫Øt bu·ªôc"),
    }),
  })
  .required();

// üîπ Schema x√≥a user
const deleteUserByIdSchema = yup
  .object({
    params: yup.object({
      id: yup
        .string()
        .matches(objectIdRegex, { message: "ID kh√¥ng h·ª£p l·ªá" })
        .required("ID l√† b·∫Øt bu·ªôc"),
    }),
  })
  .required();

// üîπ Schema truy v·∫•n danh s√°ch user
const getAllUsersSchema = yup
  .object({
    query: yup.object({
      page: yup.number().integer().positive().optional(),
      limit: yup.number().integer().positive().optional(),
      sort_by: yup
        .string()
        .matches(/^(asc|desc)$/)
        .optional(),
      sort_type: yup
        .string()
        .matches(/^(createdAt|firstName|email)$/)
        .optional(),
      keyword: yup.string().min(3).max(50).optional(),
    }),
  })
  .required();

export default {
  requestOtpSchema,
  verifyOtpSchema,
  updateUserSchema,
  getUserByIdSchema,
  deleteUserByIdSchema,
  getAllUsersSchema,
};
